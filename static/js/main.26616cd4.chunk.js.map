{"version":3,"sources":["components/SortDropdown.js","components/Canvas.js","components/DisplayItem.js","components/DisplayList.js","components/App.js","index.js"],"names":["SortDropdown","props","handleChange","event","preventDefault","userChoice","target","value","createRestaurantArr","setState","dropDownValue","state","className","id","this","onChange","React","Component","Canvas","imageSrc","image","canvas","refs","context","getContext","Image","src","width","height","onload","nWidth","naturalWidth","nHeight","naturalHeight","targetHeight","cropSy","cropSheight","drawImage","targetWidth","cropSx","cropSwidth","ref","style","DisplayItem","description","name","tags","DisplayList","restaurants","map","restaurant","delivery_price","key","App","dropDownVal","restaurantList","RestaurantData","uuid","sort","a","b","restaurantA","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26616cd4.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./SortDropdown.css\";\r\n\r\nclass SortDropdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { dropDownValue: \"AtoZ\" };\r\n  }\r\n\r\n  // When a user changes the dropdown option\r\n  handleChange = event => {\r\n    event.preventDefault();\r\n    // Take the user input and\r\n    // set it to the variable 'userChoice'.\r\n    let userChoice = event.target.value;\r\n    // Render the list of restaurants based on the user choice.\r\n    this.props.createRestaurantArr(userChoice);\r\n    // Update the state 'dropDownValue'\r\n    this.setState({ dropDownValue: userChoice });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"field\">\r\n        <label id=\"sortTitle\">Sort in: </label>\r\n        <select\r\n          className=\"dropdown\"\r\n          value={this.state.dropDownValue}\r\n          onChange={this.handleChange}\r\n        >\r\n          <option className=\"dropdown__option\" value=\"AtoZ\">\r\n            ascending order (A-Z)\r\n          </option>\r\n          <option className=\"dropdown__option\" value=\"ZtoA\">\r\n            descending order (Z-A)\r\n          </option>\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortDropdown;\r\n","import React from \"react\";\r\n\r\nclass Canvas extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.imageSrc = this.props.image;\r\n  }\r\n\r\n  // When the app is loaded,\r\n  // display a image to each card.\r\n  componentDidMount() {\r\n    const canvas = this.refs.canvas;\r\n    const context = canvas.getContext(\"2d\");\r\n    const image = new Image();\r\n    image.src = this.imageSrc;\r\n    // Set the image ratio to be displayed on the browser.\r\n    const myRatio = 0.7;\r\n    // The image width to be displayed on the browser.\r\n    canvas.width = 290;\r\n    // Set a canvas height based on myRation and canvas width.\r\n    canvas.height = canvas.width * myRatio;\r\n\r\n    image.onload = () => {\r\n      // The width of the original image.\r\n      let nWidth = image.naturalWidth;\r\n      // The height of the original image.\r\n      let nHeight = image.naturalHeight;\r\n      // The ratio of the original image.\r\n      let nRatio = nHeight / nWidth;\r\n\r\n      // If the original image's height is taller than my canvas frame.\r\n      if (nRatio > myRatio) {\r\n        // Calculate the target canvas height\r\n        // based on the width of the original image and myRatio.\r\n        let targetHeight = nWidth * myRatio;\r\n        // Calculate y coordinate to define where to start clipping.\r\n        // The value is the center point of the original img 's height.\r\n        let cropSy = (nHeight - targetHeight) / 2;\r\n        // The height of the clipped image.\r\n        let cropSheight = nHeight - (nHeight - targetHeight);\r\n\r\n        context.drawImage(\r\n          image,\r\n          0,\r\n          cropSy,\r\n          nWidth,\r\n          cropSheight,\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n      }\r\n      // If the picture's width is wider than my canvas frame.\r\n      else {\r\n        // Calculate the target width\r\n        // based on the height of the original image and myRatio.\r\n        let targetWidth = nHeight / myRatio;\r\n        // Calculate x coordinate to define where to start clipping.\r\n        // It is the center point of the original img's width.\r\n        let cropSx = (nWidth - targetWidth) / 2;\r\n        // The width of the clipped image.\r\n        let cropSwidth = nWidth - (nWidth - targetWidth);\r\n\r\n        context.drawImage(\r\n          image,\r\n          cropSx,\r\n          0,\r\n          cropSwidth,\r\n          nHeight,\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n      }\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"image\">\r\n        <canvas ref=\"canvas\" style={{ width: \"100%\", height: \"100%\" }}></canvas>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import React from \"react\";\r\nimport Canvas from \"./Canvas\";\r\nimport \"./DisplayItem.css\";\r\n\r\nconst DisplayItem = ({ description, image, name, tags }) => {\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card__image\">\r\n        {/* Insert image into canvas  */}\r\n        <Canvas image={image} name={name} />\r\n      </div>\r\n      <div className=\"card__content\">\r\n        <div className=\"header\">{name}</div>\r\n        <div className=\"description\">{description}</div>\r\n      </div>\r\n      <div className=\"card__extra-content\">\r\n        <div className=\"tags\">\r\n          {tags[0]}, {tags[1]}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayItem;\r\n","import React from \"react\";\r\nimport DisplayItem from \"./DisplayItem\";\r\nimport \"./DisplayList.css\";\r\n\r\nconst DisplayList = ({ restaurants }) => {\r\n  return (\r\n    <div className=\"cards\">\r\n      {/* Generate a new array which is made up of DisplayItem component. \r\n      DisplayItem is created with every element in the state 'restaurants' array. */}\r\n      {restaurants.map(restaurant => {\r\n        const {\r\n          delivery_price,\r\n          description,\r\n          image,\r\n          name,\r\n          tags,\r\n          id\r\n        } = restaurant;\r\n        return (\r\n          <DisplayItem\r\n            key={id}\r\n            delivery_price={delivery_price}\r\n            description={description}\r\n            image={image}\r\n            name={name}\r\n            tags={tags}\r\n          />\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayList;\r\n","import React from \"react\";\r\n// uuid is for creating a unique id to each restaurant (check line:19).\r\nimport uuid from \"uuid\";\r\nimport RestaurantData from \"../data/restaurants.json\";\r\nimport SortDropdown from \"./SortDropdown\";\r\nimport DisplayList from \"./DisplayList\";\r\nimport \"./App.css\";\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    restaurants: []\r\n  };\r\n\r\n  // Sort the restaurant list\r\n  // in an alphabetical ascending or descending order\r\n  createRestaurantArr = dropDownVal => {\r\n    let restaurantList = RestaurantData.restaurants;\r\n\r\n    // Set a unique id to each restaurant\r\n    for (let elem of restaurantList) {\r\n      elem.id = uuid();\r\n    }\r\n\r\n    // Sort the original data in ascending order,\r\n    // when the dropdown is changed to \"acsending order(A-Z)\"\r\n    if (dropDownVal === \"AtoZ\") {\r\n      restaurantList = restaurantList.sort((a, b) => {\r\n        // Use the name of restaurants\r\n        // to arrange in alphabetical order.\r\n        let restaurantA = a.name;\r\n        let restaurantB = b.name;\r\n        if (restaurantA < restaurantB) {\r\n          return -1;\r\n        } else {\r\n          return 1;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Sort the original data in descending order\r\n    // when the dropdown is changed to \"descendidng order(Z-A)\".\r\n    else if (dropDownVal === \"ZtoA\") {\r\n      restaurantList = restaurantList.sort((a, b) => {\r\n        let restaurantA = a.name;\r\n        let restaurantB = b.name;\r\n        if (restaurantB < restaurantA) {\r\n          return -1;\r\n        } else {\r\n          return 1;\r\n        }\r\n      });\r\n    }\r\n    // Update the state \"restaurants\" with a newly arranged array.\r\n    this.setState({\r\n      restaurants: restaurantList\r\n    });\r\n  };\r\n\r\n  // Display the list of restaurants\r\n  // in ascending order when the app is loaded.\r\n  componentDidMount() {\r\n    this.createRestaurantArr(\"AtoZ\");\r\n  }\r\n\r\n  // Display the drop down button and the list of restaurants.\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <SortDropdown createRestaurantArr={this.createRestaurantArr} />\r\n        <DisplayList restaurants={this.state.restaurants} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}